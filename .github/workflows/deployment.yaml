on:
  push:
    branches:
      - main

jobs:
  deploy:
    # Use a self-hosted runner that is on the same network as your cluster.
    # If you instead have a publicly reachable API endpoint, you can keep ubuntu-latest.
    runs-on: [self-hosted, Windows, X64] # for example, if you are using a self-hosted runner on Windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        repository: Oreire/kub-pod-svc.git # Ensure the correct repository is referenced
        ref: main # Specify the branch to check out

    - name: Set up kubeconfig
      shell: bash
      run: |
        # Ensure the .kube directory exists
        mkdir -p $HOME/.kube
        # Copy the local kubeconfig file from the specified path to the runner's .kube directory
        cp "c:\users\ajayi\.kube\config" $HOME/.kube/config
        # Set the KUBECONFIG environment variable
        export KUBECONFIG=$HOME/.kube/config
        # Verify the kubeconfig file
        kubectl config view
        # Display cluster information to ensure connectivity
        kubectl cluster-info
    - name: Set up kubeconfig
      shell: bash
      run: |
          # Ensure the .kube directory exists
          mkdir -p $HOME/.kube
          # Only copy the kubeconfig file if the source and destination are different
          if [ "$(realpath 'c:\\users\\ajayi\\.kube\\config')" != "$(realpath $HOME/.kube/config)" ]; then
            cp "c:\\users\\ajayi\\.kube\\config" $HOME/.kube/config
          else
            echo "Source and destination paths are the same. Skipping copy."
          fi
          # Set the KUBECONFIG environment variable
          export KUBECONFIG=$HOME/.kube/config
          # Verify the kubeconfig file
          kubectl config view
          # Display cluster information to ensure connectivity
          kubectl cluster-info
      
    - name: Verify kubectl installation
      shell: bash
      # Check if kubectl is installed and configured correctly 
      run: |
        # Check if kubectl is available on the runner
        which kubectl || echo "kubectl is not installed on the runner"
        kubectl version --client || echo "Ensure kubectl is correctly configured"

    - name: Debug Kubeconfig
      shell: bash
      # Debug the kubeconfig file to ensure it is set up correctly
      run: |
        echo "Testing kubeconfig connection..."
        kubectl config current-context || echo "No current context found. Verify kubeconfig."
        kubectl cluster-info || echo "Failed to connect to the cluster."
        kubectl get nodes || echo "Failed to get nodes from the Kubernetes cluster"

    - name: Apply Kubernetes manifests
      shell: bash
      # Apply the Kubernetes manifests to deploy the pods and services
      run: |
        # Change directory to the folder containing your manifests
        cd kube
        # (Optional) View the current kubeconfig and cluster connection details
        kubectl config view
        kubectl get nodes  # to verify connectivity
        # Apply your manifests
        kubectl apply -f nginxpod.yaml
        kubectl apply -f prometheuspod.yaml 
        kubectl apply -f grafanapod.yaml

        kubectl apply -f nginxsvc.yaml
        kubectl apply -f prometheussvc.yaml